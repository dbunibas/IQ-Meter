<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="build" name="IQMeter" xmlns:fx="javafx:com.sun.javafx.tools.ant">
 
    <!-- ***************************************************
          Importazione del template
    *************************************************** -->

    <import file="./swing-ping-template-build.xml" />


    <taskdef resource="com/sun/javafx/tools/ant/antlib.xml"      
         uri="javafx:com.sun.javafx.tools.ant"
         classpath="./lib/ant-javafx.jar"/>    

    <!-- ***************************************************
                  Target Ridefiniti
    *************************************************** -->

    <target name="-init-folders" depends="">
        <!-- Cartelle -->
        <property name="src.dir" location="./src" />
        <property name="test.src.dir" location="./test" />
        <property name="build.dir" location="./build/classes" />
        <property name="test.dir" location="./build/test" />
        <property name="test.build.dir" location="${test.dir}/classes" />
        <property name="test.report.dir" location="${test.dir}/report" />
        <property name="test.data.dir" location="${test.src.dir}/dati" />
        <property name="dist.dir" location="./dist" />
        <property name="utilita.src.dir" location="../utilita/src" />
        <property name="utilita.build.dir" location="../utilita/build/classes" />
        <property name="javadoc.dir" location="./dist/javadoc" />
        <property name="utilita.javadoc.dir" location="../utilita/dist/javadoc" />    
        <property name="misc.dir" location="./resources" />
        <property name="resources.dir" location="./resources" />
        <property name="conf.dir" location="${src.dir}/conf" />
        <condition property="test.data.dir.present">
            <available file="${test.data.dir}" type="dir" />    
        </condition>
        <condition property="resources.dir.present">
            <available file="${resources.dir}" type="dir" />    
        </condition>
        <condition property="conf.dir.present">
            <available file="${conf.dir}" type="dir" />    
        </condition>
    </target>
    <target name="-prepare-resources" depends="prepare,-create-resources-dir">
        <copy todir="${build.dir}/resources">
            <fileset dir="${resources.dir}" />
        </copy>
        <copy todir="${build.dir}">
            <fileset dir="${src.dir}" includes="**/*.jfrm" />
        </copy>   
    </target> 

    <target name="-init-classpath" depends="-init-folders">
        <property name="build.sysclasspath" value="ignore" />
        <path id="compile.classpath">
            <pathelement location="${build.dir}" />
            <fileset dir="${lib.dir}" >
                <include name="*.jar" />
                <exclude name="log4j-*.jar" />
            </fileset>
        </path>
        <path id="run.classpath" >
            <path refid="compile.classpath" />
            <fileset dir="${lib.dir}" includes="log4j-*.jar" /> 
        </path>
        <fileset id="run.jar.fileset" dir="${lib.dir}">        
            <include name="*.jar" />
            <exclude name="log4j-*.jar" />
            <exclude name="junit.jar" />
            <exclude name="jfxrt.jar" />
            <exclude name="ant-javafx.jar" />
        </fileset>
        <path id="run.jar.classpath">
            <fileset refid="run.jar.fileset" />

        </path>
        <path id="test.classpath">
            <path refid="run.classpath" />
            <pathelement location="${test.build.dir}" />
            <fileset refid="test.jars" />
        </path>
    </target>

    <target name="test-modello" depends="-prepare-test, compile-test" description="esegue i test sul modello">
        <junit haltonfailure="false"
               errorProperty="test.failed"
               failureProperty="test.failed"
               fork="true">
            <assertions>
                <enable/>
            </assertions>
            <classpath refid="test.classpath" />
            <batchtest todir="${test.report.dir}">
                <fileset dir="${test.build.dir}">
                    <include name="**/modello/Test*.class" />
                    <include name="**/controllo/Test*.class" />
                </fileset>
            </batchtest>
            <formatter type="plain" usefile="false" />
            <formatter type="xml" />
        </junit>
        <fail if="test.failed">
            Esecuzione dell'operazione fallita a causa del fallimento dei test
        </fail>
    </target>


    <target name="jar" depends="rebuild, -init-version, -create-manifest" description="crea il jar">  
        <fx:jar destfile="${dist.dir}/${ant.project.name}-${major.version}.${minor.version}-build${build.number}.jar" >
            <fx:application name="IQ-Meter"
                        mainClass="${main.class}" toolkit="swing"/>
            <fx:resources>
                <fx:fileset dir="${build.dir}" includes="${ant.project.name}-java/lib/*.jar"/>
            </fx:resources>
            <fileset dir="${build.dir}">
                <include name="**/*.*" />
            </fileset>

        </fx:jar>
        <jar destfile="${dist.dir}/${ant.project.name}-${major.version}.${minor.version}-build${build.number}.jar" manifest="${dist.dir}/MANIFEST.MF" update="true">
        </jar>
    </target> 

    <target name="-create-manifest" depends="init, -init-version">
        <pathconvert property="run.jar.classpath.manifest" pathsep="" refid="run.jar.classpath">
            <chainedmapper>
                <flattenmapper/>
                <globmapper from="*" to=" lib/*"/>
            </chainedmapper>
        </pathconvert>
        <manifest file="${dist.dir}/MANIFEST.MF" >
            <attribute name="JavaFX-Version" value="2.2" />
            <attribute name="JavaFX-Application-Class" value="${main.class}" />
            <attribute name="JavaFX-Feature-Proxy" value="none" />
            <attribute name="Built-by" value="${user.name}" />
            <attribute name="Implementation-Version" value="${major.version}.${minor.version}-build${build.number}" />
            <attribute name="Main-Class" value="com/javafx/main/Main" />
            <attribute name="JavaFX-Class-Path" value="${run.jar.classpath.manifest}" />
        </manifest>
    </target>

    <target name="dist" depends="rebuild, -init-version, jar, javadoc, -init-build-files" description="crea lo zip distribuibile">
        <zip zipfile="${dist.dir}/${ant.project.name}-java-${major.version}.${minor.version}-build${build.number}.zip">
            <!-- jar -->
            <zipfileset dir="${dist.dir}" prefix="${ant.project.name}-java" includes="*.jar" />
            <zipfileset dir="${misc.dir}" prefix="${ant.project.name}-java" includes="*.bat" />
            <!-- librerie -->
            <zipfileset prefix="${ant.project.name}-java/lib" refid="run.jar.fileset" />
            <zipfileset dir="./lib" prefix="${ant.project.name}-java/lib" includes="*.jar" />
            <!-- sorgenti -->
            <zipfileset dir="${src.dir}" prefix="${ant.project.name}-java/src" />
            <zipfileset dir="./nbproject" prefix="${ant.project.name}-java/src/nbproject"  includes="*.xml" /> 
            <!-- test -->
            <zipfileset dir="${test.src.dir}" prefix="${ant.project.name}-java/test" />
            <!-- javadoc -->
            <zipfileset dir="${javadoc.dir}" prefix="${ant.project.name}-java/javadoc" />
            <!-- varie -->
            <zipfileset dir="${misc.dir}" prefix="${ant.project.name}-java/resources" />
            <!-- build -->
            <zipfileset dir="." prefix="${ant.project.name}-java" includes="*.*" />
            <zipfileset prefix="" refid="build.file.templates" />
        </zip>
    </target> 


</project>