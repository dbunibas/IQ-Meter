/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package it.unibas.iqmeter.view;

import it.unibas.iqmeter.controller.ActionSelectTool;
import it.unibas.iqmeter.Constant;
import it.unibas.iqmeter.Utils;
import it.unibas.iqmeter.controller.ActionAddTool;
import it.unibas.iqmeter.controller.ActionChooseFile;
import it.unibas.iqmeter.controller.ActionHideAddTool;
import it.unibas.iqmeter.model.MappingTool;
import it.unibas.ping.binding.Form;
import it.unibas.ping.binding.IForm;
import it.unibas.ping.binding.collegatori.CollegatoreComboBox;
import it.unibas.ping.binding.collegatori.CollegatoreTextField;
import it.unibas.ping.binding.collegatori.ICollegatore;
import it.unibas.ping.binding.osservatori.IOsservatore;
import it.unibas.ping.binding.osservatori.OsservatoreTextField;
import it.unibas.ping.convalida.ConvalidatoreValoreAstratto;
import it.unibas.ping.convalida.IConvalidatoreValore;
import it.unibas.ping.framework.PannelloPing;
import java.io.File;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Antonio Genovese
 */
public class PanelAddTool extends PannelloPing {

    /**
     * Creates new form PanelAddTool
     */
    public PanelAddTool() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelTool = new javax.swing.JLabel();
        comboTools = new javax.swing.JComboBox();
        labelTranslated = new javax.swing.JLabel();
        fieldTranslated = new javax.swing.JTextField();
        buttonFileTranslated = new javax.swing.JButton();
        labelNote = new javax.swing.JLabel();
        labelMapping = new javax.swing.JLabel();
        fieldMapping = new javax.swing.JTextField();
        buttonFileMapping = new javax.swing.JButton();
        buttonAccept = new javax.swing.JButton();
        buttonUndo = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Add Tool"));

        labelTool.setFont(labelTool.getFont());
        labelTool.setText("Mapping Tool:");

        comboTools.setFont(comboTools.getFont());
        comboTools.setName("comboTools"); // NOI18N

        labelTranslated.setFont(labelTranslated.getFont());
        labelTranslated.setText("Generated Instance:");

        fieldTranslated.setFont(fieldTranslated.getFont());
        fieldTranslated.setName("fieldTranslated"); // NOI18N
        fieldTranslated.setPreferredSize(new java.awt.Dimension(239, 27));

        buttonFileTranslated.setFont(buttonFileTranslated.getFont());
        buttonFileTranslated.setText("...");
        buttonFileTranslated.setName("buttonFileTranslated"); // NOI18N

        labelNote.setFont(labelNote.getFont().deriveFont(labelNote.getFont().getSize()-2f));
        labelNote.setText("<html><P ALIGN=\"justify\">Note: <br>For quality measure we compare Generated Instance wrt Expected Target Instance .</P>");
        labelNote.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        labelMapping.setFont(labelMapping.getFont());
        labelMapping.setText("Mapping File:");

        fieldMapping.setFont(fieldMapping.getFont());
        fieldMapping.setName("fieldMapping"); // NOI18N
        fieldMapping.setPreferredSize(new java.awt.Dimension(239, 27));

        buttonFileMapping.setFont(buttonFileMapping.getFont());
        buttonFileMapping.setText("...");
        buttonFileMapping.setName("buttonFileMapping"); // NOI18N

        buttonAccept.setFont(buttonAccept.getFont());
        buttonAccept.setMnemonic('A');
        buttonAccept.setText("Add");

        buttonUndo.setFont(buttonUndo.getFont());
        buttonUndo.setMnemonic('C');
        buttonUndo.setText("Cancel");
        buttonUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUndoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelNote, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fieldTranslated, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                            .addComponent(labelTranslated, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(20, 20, 20)
                        .addComponent(buttonFileTranslated, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(labelTool)
                        .addGap(18, 18, 18)
                        .addComponent(comboTools, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelMapping)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(fieldMapping, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(20, 20, 20)))
                        .addComponent(buttonFileMapping, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(buttonUndo)
                        .addGap(18, 18, 18)
                        .addComponent(buttonAccept)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboTools, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelTool))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelMapping)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldMapping, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonFileMapping))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelTranslated)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldTranslated, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonFileTranslated))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelNote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonAccept)
                    .addComponent(buttonUndo)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUndoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buttonUndoActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAccept;
    private javax.swing.JButton buttonFileMapping;
    private javax.swing.JButton buttonFileTranslated;
    private javax.swing.JButton buttonUndo;
    private javax.swing.JComboBox comboTools;
    private javax.swing.JTextField fieldMapping;
    private javax.swing.JTextField fieldTranslated;
    private javax.swing.JLabel labelMapping;
    private javax.swing.JLabel labelNote;
    private javax.swing.JLabel labelTool;
    private javax.swing.JLabel labelTranslated;
    // End of variables declaration//GEN-END:variables

    @Override
    public void inizializza() {
        initComponents();
        createForm();
        postInit();
        this.setVisible(true);
    }

    @SuppressWarnings("unchecked")
    public void buildCombo() {
        this.comboTools.removeAllItems();
        List<String> tools = (List<String>) this.modello.getBean(Constant.TOOLS_LIST);
        for (String string : tools) {
            comboTools.addItem(string.replace("_", " "));
        }
    }

    private void createForm() {
        IForm form = new Form(this);
        //tool name
        ICollegatore collTool = new CollegatoreComboBox(form, this.comboTools, MappingTool.class.getName(), MappingTool.class, "toolName");
        //mapping file
        IOsservatore obsMapping = new OsservatoreTextField(Constant.FIELD_FILE_MAPPING, MappingTool.class.getName(), MappingTool.class, "mappingPath");
        ICollegatore collMapping = new CollegatoreTextField(form, Constant.FIELD_FILE_MAPPING, MappingTool.class.getName(), MappingTool.class, "mappingPath");
        IConvalidatoreValore convMapping = createFieldValidator(Constant.FIELD_FILE_MAPPING, "Mapping Task");
        collMapping.addConvalidatore(convMapping);
        //file instances generated
        IOsservatore obsTranslated = new OsservatoreTextField(Constant.FIELD_FILE_TRANSLATED, MappingTool.class.getName(), MappingTool.class, "translatedInstance");
        ICollegatore collTranslated = new CollegatoreTextField(form, Constant.FIELD_FILE_TRANSLATED, MappingTool.class.getName(), MappingTool.class, "translatedInstance");
        IConvalidatoreValore convTranslated = createFieldValidator(Constant.FIELD_FILE_TRANSLATED, "Generated Instance");
        
        //file script
        IOsservatore obsScript = new OsservatoreTextField(Constant.FIELD_FILE_SCRIPT,MappingTool.class.getName(), MappingTool.class, "scriptFile");
        ICollegatore collScript = new CollegatoreTextField(form, Constant.FIELD_FILE_SCRIPT, MappingTool.class.getName(), MappingTool.class, "scriptFile");
        
        collTranslated.addConvalidatore(convTranslated);
        form.setBottoneCommit(this.buttonAccept, ActionAddTool.class.getName());
        form.setBottoneRollback(this.buttonUndo, ActionHideAddTool.class.getName());
    }

//    private IConvalidatoreValore createFieldValidator(String field, final String message) {
//        return new ConvalidatoreValoreAstratto(field) {
//            @Override
//            public List convalida(Object o) {
//                String name = (String) o;
//                List<String> errors = new ArrayList<String>();
//                if (name.equals("")) {
//                    errors.add("The data value " + message + " can not be empty");
//                }
//                return errors;
//            }
//
//            @Override
//            public Object converti(Object o) {
//                return o;
//            }
//        };
//    }
    private IConvalidatoreValore createFieldValidator(String field, final String message) {
        return new ConvalidatoreValoreAstratto(field) {
            @Override
            public List convalida(Object o) {
                String name = (String) o;
                List<String> errors = new ArrayList<String>();
                if (name.equals("")) {
                    errors.add("The data value " + message + " can not be empty");
                } else if (message.equals("Mapping Task")) {
                    String tool = (String) modello.getBean(Constant.COMBO_TOOL_SELECTED);
                    if (!Utils.convalidateFormatFile(tool, name)) {
                        errors.add("The File for data value " + message + " is not valid");
                    }
                } else if (!name.contains(File.separator)) {
                    errors.add("Path for data value " + message + " is not valid");
                }
                return errors;
            }

            @Override
            public Object converti(Object o) {
                return o;
            }
        };
    }

    private void postInit() {
        this.buttonFileMapping.setAction(this.controllo.getAzioneSwing(ActionChooseFile.class.getName()));
        this.buttonFileTranslated.setAction(this.controllo.getAzioneSwing(ActionChooseFile.class.getName()));
        this.comboTools.setAction(this.controllo.getAzioneSwing(ActionSelectTool.class.getName()));

    }
}
