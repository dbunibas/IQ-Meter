/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package it.unibas.iqmeter.view;

import it.unibas.iqmeter.Constant;
import it.unibas.iqmeter.Utils;
import it.unibas.iqmeter.controller.ActionDeleteScript;
import it.unibas.iqmeter.controller.ActionOverwriteScript;
import it.unibas.iqmeter.model.MappingExecution;
import it.unibas.ping.framework.FinestraDiDialogoPing;
import java.awt.Dialog;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.AbstractAction;
import static javax.swing.JFrame.setDefaultLookAndFeelDecorated;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.UIManager;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 *
 * @author Antonio Genovese
 */
public class DialogAnnotationScript extends FinestraDiDialogoPing {

    private Log logger = LogFactory.getLog(this.getClass());

    static {
        setDefaultLookAndFeelDecorated(true);
        setlookAndFeel();
    }

    private static void setlookAndFeel() {
        try {
            String lookAndFeelname = UIManager.getSystemLookAndFeelClassName();
            UIManager.setLookAndFeel(lookAndFeelname);
        } catch (Exception ex) {
            System.out.println("Error loading look and feel");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelCentral = new javax.swing.JPanel();
        scrollArea = new javax.swing.JScrollPane();
        textAreaScript = new javax.swing.JTextArea();
        labelIMG = new javax.swing.JLabel();
        labelTitle = new javax.swing.JLabel();
        buttonDelete = new javax.swing.JButton();
        buttonClose = new javax.swing.JButton();
        buttonSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        panelCentral.setFont(panelCentral.getFont());
        panelCentral.setPreferredSize(new java.awt.Dimension(300, 100));

        textAreaScript.setEditable(false);
        textAreaScript.setColumns(1);
        textAreaScript.setFont(textAreaScript.getFont());
        textAreaScript.setRows(5);
        textAreaScript.setName("textAreaScript"); // NOI18N
        scrollArea.setViewportView(textAreaScript);

        labelIMG.setMaximumSize(new java.awt.Dimension(24, 24));
        labelIMG.setMinimumSize(new java.awt.Dimension(24, 24));
        labelIMG.setName(""); // NOI18N
        labelIMG.setPreferredSize(new java.awt.Dimension(24, 24));

        labelTitle.setFont(labelTitle.getFont());
        labelTitle.setText("LabelTitle");

        buttonDelete.setText("Delete");
        buttonDelete.setName("buttonScriptDelete"); // NOI18N

        buttonClose.setText("Close");
        buttonClose.setName("buttonScriptDelete"); // NOI18N

        buttonSave.setText("Save");
        buttonSave.setName("buttonScriptDelete"); // NOI18N

        javax.swing.GroupLayout panelCentralLayout = new javax.swing.GroupLayout(panelCentral);
        panelCentral.setLayout(panelCentralLayout);
        panelCentralLayout.setHorizontalGroup(
            panelCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCentralLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollArea)
                    .addGroup(panelCentralLayout.createSequentialGroup()
                        .addComponent(labelIMG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelTitle)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCentralLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                        .addComponent(buttonSave)
                        .addGap(18, 18, 18)
                        .addComponent(buttonDelete)
                        .addGap(18, 18, 18)
                        .addComponent(buttonClose)
                        .addGap(12, 12, 12)))
                .addContainerGap())
        );
        panelCentralLayout.setVerticalGroup(
            panelCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCentralLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(panelCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelIMG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelTitle))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollArea, javax.swing.GroupLayout.DEFAULT_SIZE, 19, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonDelete)
                    .addComponent(buttonClose)
                    .addComponent(buttonSave))
                .addContainerGap())
        );

        getContentPane().add(panelCentral, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonClose;
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonSave;
    private javax.swing.JLabel labelIMG;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JPanel panelCentral;
    private javax.swing.JScrollPane scrollArea;
    private javax.swing.JTextArea textAreaScript;
    // End of variables declaration//GEN-END:variables

    @Override
    public void inizializza() {
        initComponents();
        postInit();
        JScrollPane pane = new JScrollPane(this.panelCentral);
        Image img = Utils.createIcon(Constant.ICON_ANNOTATION_SCRIPT).getImage();
        this.setIconImage(img);
        this.getContentPane().add(pane);
        this.setLocationRelativeTo(this.vista.getFramePrincipale());
        this.setTitle(Constant.ANNOTATION_SCRIPT_TEXT.replace("_", " "));
        this.setSize(800, 600);
        this.setModal(true);
        this.setModalExclusionType(Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
    }

    private void close() {
        this.setVisible(false);
    }

    private void postInit() {
        this.buttonClose.setAction(new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                close();
            }
        });
        this.buttonClose.setText("Close");
        this.buttonClose.setMnemonic(new Integer(KeyEvent.VK_C));
        this.buttonClose.setToolTipText("Close Dialog");
        this.buttonSave.setAction(controllo.getAzioneSwing(ActionOverwriteScript.class.getName()));
        this.buttonDelete.setAction(controllo.getAzioneSwing(ActionDeleteScript.class.getName()));
        this.setAlwaysOnTop(false);
        this.textAreaScript.addKeyListener(new AreaListner());
    }

    public void setScriptText() {
        this.textAreaScript.setText("");
        MappingExecution execution = (MappingExecution) modello.getBean(Constant.EXECUTION_SELECTED);
        String text = (String) modello.getBean(execution.getNumberLabel() + Constant.ANNOTATION_SCRIPT_TEXT);
        JPanel panelTool = (JPanel) modello.getBean(Constant.TAB_SELECTED);
        textAreaScript.setText(text);
        this.textAreaScript.setAlignmentX(CENTER_ALIGNMENT);
        textAreaScript.setEditable(true);
        textAreaScript.setCaretPosition(0);
        this.textAreaScript.setAlignmentX(CENTER_ALIGNMENT);
        this.labelIMG.setIcon(Utils.createIcon(Constant.ICON_ANNOTATION_SCRIPT));
        if (text.isEmpty()) {
            this.labelTitle.setText("Add Annotation Script for the Execution #" + execution.getNumberLabel() + " of " + panelTool.getName());
        } else {
            this.labelTitle.setText("Edit or Delete Annotation Script for the Execution #" + execution.getNumberLabel() + " of " + panelTool.getName());
            this.controllo.abilitaAzioneSwing(ActionDeleteScript.class.getName());
        }
        this.buttonSave.setText("Save");
        this.buttonSave.setToolTipText("Save Annotation Script");
        this.buttonSave.setMnemonic('A');
        this.setLocationRelativeTo(this.vista.getFramePrincipale());
        this.setSize(800, 600);
    }

    private class AreaListner implements KeyListener {

        public void keyTyped(KeyEvent e) {
        }

        public void keyPressed(KeyEvent e) {
        }

        public void keyReleased(KeyEvent e) {
            MappingExecution execution = (MappingExecution) modello.getBean(Constant.EXECUTION_SELECTED);
            String text = (String) modello.getBean(execution.getNumberLabel() + Constant.ANNOTATION_SCRIPT_TEXT);
            if (!textAreaScript.getText().replaceAll("\n", "").equals(text.replaceAll("\n", ""))) {
                controllo.abilitaAzioneSwing(ActionOverwriteScript.class.getName());
            } else {
                controllo.disabilitaAzioneSwing(ActionOverwriteScript.class.getName());
            }
        }
    }
}
